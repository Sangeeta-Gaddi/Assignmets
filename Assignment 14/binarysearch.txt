Q. What is binary search tree.

* Binary Search Tree(BST): Is a binary tree data structure.
-> It should satisfy the below two conditions.
1) node.data>maxima of left subtree.(every node data should be greater than maximum of left subtree).
2) node.data<minima of right subtree.(every node data should be lesser than minimum of right subtree).

Example:
class Node {
    constructor(data) {
      this.data = data;
      this.left = null;
      this.right = null;
    }
  }
  
  class BinarySearchTree {
    constructor() {
      this.root = null;
    }
  
    insert(data) {
      let newNode = new Node(data);
      if (!this.root) {
        this.root = newNode;
      } else {
        this.insertNode(this.root, newNode);
      }
    }
  
    insertNode(node, newNode) {
      if (newNode.data < node.data) {
        if (!node.left) {
          node.left = newNode;
        } else {
          this.insertNode(node.left, newNode);
        }
      } else {
        if (!node.right) {
          node.right = newNode;
        } else {
          this.insertNode(node.right, newNode);
        }
      }
    }
  
    // Function for in-order traversal
    inOrderTraversal(node) {
      if (node !== null) {
        this.inOrderTraversal(node.left);
        console.log(node.data);
        this.inOrderTraversal(node.right);
      }
    }
  
    // Helper function to print the binary search tree
    print() {
      this.inOrderTraversal(this.root);
    }
  }
  
  let bst = new BinarySearchTree();
  bst.insert(10);
  bst.insert(5);
  bst.insert(15);
  bst.insert(3);
  bst.insert(7);
  
  // Print the binary search tree
  bst.print();
  //output:3
           5
           7
          10
          15