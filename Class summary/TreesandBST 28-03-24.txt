* Here some more topics related to trees and Binary Search Tree topics are discussed.

* Height of tree:It is a longest path from root node to any of its descendent leaf node.
Example:
class Node {
    constructor(data) {
      this.data = data;
      this.left = null;
      this.right = null;
    }
  }
  
  function treeheight(root) {
    if (!root) {
      return -1; // Height of an empty tree is -1
    }
    
    let leftheight = treeheight(root.left);
    let rightheight = treeheight(root.right);
    
    return (1 + Math.max(leftheight, rightheight));
  }
  
  let root = new Node(1);
  root.left = new Node(2);
  root.right = new Node(3);
  root.left.left=new Node(6);
  root.left.left.left = new Node(4);
  root.left.right = new Node(5);

  console.log("Height of the tree:", treeheight(root)); 
  //output:Height of the tree: 3

* Size of tree:The size of a tree is the total number node present in the tree.
Example:
class Node {
    constructor(data) {
      this.data = data;
      this.left = null;
      this.right = null;
    }
  }
  
  function treesize(root) {
    if (!root) {
      return 0; // Size of an empty tree is 0
    }
    
    let leftsize = treesize(root.left);
    let rightsize = treesize(root.right);
    
    return 1 + leftsize + rightsize;
  }
  
  let root = new Node(10);
  root.left = new Node(20);
  root.right = new Node(30);
  root.left.left = new Node(40);
  root.left.right = new Node(50);
  
  console.log("Size of the tree:", treesize(root));
  //output:Size of the tree: 5

* Sum of all nodes:It refers to the total sum of the values stored in each node of the tree.
Example:
class Node {
    constructor(data) {
      this.data = data;
      this.left = null;
      this.right = null;
    }
  }
  
  function sumOfNodes(root) {
    if (!root) {
      return 0; // Sum of an empty tree is 0
    }
    
    return root.data + sumOfNodes(root.left) + sumOfNodes(root.right);
  }
  
  let root = new Node(1);
  root.left = new Node(2);
  root.right = new Node(3);
  root.left.left = new Node(4);
  root.left.right = new Node(5);
  
  console.log("Sum of all nodes:", sumOfNodes(root)); 
//output:Sum of all nodes: 15

* Binary Search Tree:Binary Search Tree(BST) is a binary tree data structure.
-> It should satisfy the below two conditions.
1) node.data>maxima of left subtree.(every node data should be greater than maximum of left subtree).
2) node.data<minima of right subtree.(every node data should be lesser than minimum of right subtree).

Example:
class Node {
    constructor(data) {
      this.data = data;
      this.left = null;
      this.right = null;
    }
  }
  
  class BinarySearchTree {
    constructor() {
      this.root = null;
    }
  
    insert(data) {
      let newNode = new Node(data);
      if (!this.root) {
        this.root = newNode;
      } else {
        this.insertNode(this.root, newNode);
      }
    }
  
    insertNode(node, newNode) {
      if (newNode.data < node.data) {
        if (!node.left) {
          node.left = newNode;
        } else {
          this.insertNode(node.left, newNode);
        }
      } else {
        if (!node.right) {
          node.right = newNode;
        } else {
          this.insertNode(node.right, newNode);
        }
      }
    }
  
    // Function for in-order traversal
    inOrderTraversal(node) {
      if (node !== null) {
        this.inOrderTraversal(node.left);
        console.log(node.data);
        this.inOrderTraversal(node.right);
      }
    }
  
    // Helper function to print the binary search tree
    print() {
      this.inOrderTraversal(this.root);
    }
  }
  
  let bst = new BinarySearchTree();
  bst.insert(10);
  bst.insert(5);
  bst.insert(15);
  bst.insert(3);
  bst.insert(7);
  
  // Print the binary search tree
  bst.print();
  //output:3
           5
           7
          10
          15