*) Describe the scoping rules for variables declared with var,let and const.

1) var:
-> Variables declared with 'var' are function scoped.This means they are accessible within the function in which they are declared and any nested functions.
-> If a 'var' variable is declared outside any function,it becomes a global variable and is accessible throughout the entire code.
-> Variables declared with 'var' are hoisted to the top of their scope.This means that the declaration is moved to the top of the function scope or global scope,but no the initialization.
Example:
function myfunction(){
    var x=10;
    console.log(x);//output:10 (access inside the function)
}
myfunction();
console.log(x);
//output:ReferenceError: x is not defined (error because x is function-scoped)

2) let:
-> Variables declared with 'let' have a block scope.This means that  they are accessible only within the block(enclosed {}) in which they are declared.
-> Variables declared with 'let' are hoisted, but they are not initialized until their declaration is encountered in the code, which prevents access to them before their declaration("temporal dead zone).
-> Variables declared with let can be reassigned a new value, but they cannot be redeclared in the same scope. 
Example:
function myfunction(){
    let b=10; // 'b' is declared and initialized with value 10
    if(true){
        let b=20; //'b' is declared in the block scope and is separate from the outer 'b'
        console.log(b);//output:20(inner 'b' withn the block)
    }
    console.log(b);//output:10(outer 'b' from outside the block)
}
myfunction();
-> In the above example, 'b' is declared with 'let' in the function and within the 'if' block. Since 'let' is block_scoped, the inner 'b' is separate from outer 'b'. The outer 'b' remains 10,ehile the inner 'b' is 20.

3) const:
-> Like 'let', variables declared with 'const' are scoped to the block in which they are declared.
-> Similar to 'let', 'const' variables are not hoisted.
-> Variables declared with 'const' cannot be re-assigned after their initial assignment.
Example:
function myfunction(){
    const c=15;// 'c' is declared and initialized with value 15 
    if(true){
        const c=20;//'c' is declared in the block scope and is separate from outer 'c'
        console.log(c);//output:20(inner 'c' within block)
    }
    console.log(c);//output:15(outer 'c' from outside block)
}
->In the above example, 'c' is declared with 'const' in the function and within the 'if' block. Since 'const' is block_scoped, the inner 'c' is separate from outer 'c'. The outer 'c' remains 15,while the inner 'c' is 20.
