let a = 0, i = N;

while (i > 0) {
    a += i;  //a=a+i store value of a=a+i//
    i /= 2;  // i=i/2 value of i is halved until it becomes less than or equal to 0//
}

* The loop runs until 'i' becomes less than or equal to 0.
* In each iteration the value of i is halved.

Let us consider example: N=16 ,this implies i is also equals to 16
1st iteration: a=a+16 => 0+16=16,  i=i/2 =>i=N/2 => i=16/2=8
               a=16, i=8
2nd iteration: a=16+8=24, i=8/2=4
               a=24       i=4
3rd iteration: a=24+4=28, i=4/2=2   
               a=28       i=2        
4th iteration: a=28+2=30, i=2/2=1
               a=30       i=1    
5th iteration: a=a+1,     i=1/2=0.5(Here the loop exits because i becomes less than 0)

The loop will execute logarithmically with base 2 in relation to the initial value of i.
i.e, log2(16)=4
which is the exponent we raised 2 to get N

Therefore the time complexity=O(log N). 

