function solve(n)
{
let i =1 
while(i < n)
{
let x = i 
while(x--)
{
0(1)
}
i++
}
}

* The outer while loop(i<n) runs 'n' times(from i 1to (n-1)).
* The other while loop(x--) also runs 'n' until x becomes 0,which results in i iteratin for each value of i.

let us consider, n=4
Here, i=1 (runs i from 1 to (n-1)) and x=i=>x=1(x runs from i and decrementing by 1 after each iteration)
1<4=>x=1,  x=1(executes 1 time)
2<4=>x=2,  x=2(executes 2 times)
3<4=>x=3,  x=3(executes 3 times)..

Here,Outerloop runs (n-1) times because starts with i=1 to i = (n-1)
Here,Innerloop runs i times,that is n times.
Therefore time complexity is the sum of positive integers=n*(n-1)/2
Applying Big O ,we get total time complexity=O(n*(n-1)/2)
                                            =O(n*2)