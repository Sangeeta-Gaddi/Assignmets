function solve(n)
{
let i = n 
while(i>0)
{
if(i%2 == 0)
{
 for(let j = 1; j <= n*n; j+=2)
{
statements
}
}
i/=2
}
}

Here, let us assume n=8
then i=8
1st iteration: i=8, 8>0, 8%2==0
enters loop=> j=1, j<=64
i=i/2=8/2=4
2nd iteration: i=4, 4>0, 4%2==0
i=4/2=2
3rd iteration: i=2, 2>0, 2%2==0
i=2/2=1
4th iteration: i=1, 1>0, 1%2!=0
does not enters inner loop,becoz it is odd

Here the outer loop executes 3 times,since it repeatedly divides i by 2(i/2),Therefore iterations can be expressed as log2(n).[i/2]
Here the inner nested loop runs n*n times.
Combining the outerloop and inner nested for loop we get=log2(n)*(n*n)
Now,applying the big O we get time complexity=O(log2(n)*n2)
                                             =O(log(n)*n2)
Total time complexity=O(log(n)*n2)


